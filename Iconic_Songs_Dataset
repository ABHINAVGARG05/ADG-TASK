Task 1.1
#importing required files
! pip install matplotlib seaborn
pip install scikit-learn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import GaussianNB

#Reading Iconic_Songs_Dataset
songs = pd.read_csv(r"C:\Users\abhin\Downloads\Iconic_Songs_Dataset.csv")

#checking for NaN/null values
songs.isnull().sum()

#removing the NaN/null 
songs = songs.dropna()

#confirming no NaN/null value cell is left
songs.isnull().sum()

#reading stats
songs.describe()
songs.info()

#data visualisation

plt.subplot(2,2,1)
sns.histplot(songs['Title'])

sns.histplot(songs['Popularity'],bins = 20, kde =True)
plt.title('Popularity Distribution')
plt.xlabel('Popularity')
plt.ylabel('Count')
plt.show()

top_artists = songs['Artist'].value_counts().head(10).index
sns.boxplot(x='Artist', y='Popularity', data=songs[songs['Artist'].isin(top_artists)])
plt.title('Popularity by Top 10 Artists')
plt.xlabel('Artist')
plt.ylabel('Popularity')


Task 1.2
songs.shape
#Data Transform
#adding a column of year by extracting year from ReleaseDate and appending in the column
songs['ReleaseDate'] = pd.to_datetime(songs['ReleaseDate'], format='%Y-%m-%d')
songs=songs.assign(Year = songs['ReleaseDate'].dt.year)
songs.head()

#adding colum of seconds and appending the values of corresponding duration by converting duration in mm:ss into seconds
def convert_duration_to_seconds(duration):
    try:
        minutes, seconds = map(int, duration.split(':'))
        return minutes * 60 + seconds
    except:
        return duration
songs['Duration_Seconds'] = songs['Duration'].apply(convert_duration_to_seconds)
songs.head()

#checking for null values and cleaning if any
songs.info()
songs = songs.dropna()

#defining variables for modeling, here I took only duration in seconds in x variable
x = songs.drop(columns=['Title', 'ReleaseDate', 'Popularity','Artist','Genre','Album','Duration','Year'])
y = songs['Popularity']

#defining variables for 2nd model, here I took Duration in seconds and year released in x variable
X = songs.drop(columns=['Title', 'ReleaseDate', 'Popularity','Artist','Genre','Album','Duration'])
print(X.shape)

#training both the models
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#here I took train size of 80% and test size of 20%

Task - 1.3
1)Doing Logistic Regression
logisticRegr = LogisticRegression(max_iter=2000)
log_Regr = LogisticRegression(max_iter=2000)
log_Regr.fit(x_train,y_train)
logisticRegr.fit(X_train, y_train)

y_pred=log_Regr.predict(x_test)
print(accuracy) ===>>> accuracy = 0.05 in this case

y_pred1=logisticRegr.predict(X_test)
accuracy = accuracy_score(y_test,y_pred)
print(accuracy) ===> accuracy = 0.05 


2)Doing SVC from SVM
svc_model = SVC()
svc_model.fit(X_train, y_train)
svc_y_pred = svc_model.predict(X_test)
svc_accuracy = accuracy_score(y_test, svc_y_pred)
svc_report = classification_report(y_test, svc_y_pred,zero_division=0, output_dict=True)
print(svc_accuracy) ===>>> 0.15 is the accuracy recorded

3)Doing  GaussianBias from Naive Bias


nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
nb_y_pred = nb_model.predict(X_test)
nb_report = classification_report(y_test, nb_y_pred, zero_division=0, output_dict=True)
nb_accuracy = accuracy_score(y_test, nb_y_pred) ===>>> 0.05 Accuracy



In this among the algorithms I used(SVM, Naive Bias,LR), SVM gives the best accuracy though it is 15%
